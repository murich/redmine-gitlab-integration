<% content_for :header_tags do %>
  <style>
    .gitlab-mappings-page {
      padding: 20px;
    }

    .mappings-header {
      margin-bottom: 30px;
      border-bottom: 2px solid #0052cc;
      padding-bottom: 15px;
    }

    .mappings-header h2 {
      margin: 0 0 10px 0;
      color: #333;
    }

    .mappings-stats {
      display: flex;
      gap: 20px;
      margin: 20px 0;
    }

    .stat-card {
      flex: 1;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .stat-card.green {
      background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
    }

    .stat-card.blue {
      background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    }

    .stat-card h3 {
      margin: 0 0 10px 0;
      font-size: 14px;
      opacity: 0.9;
    }

    .stat-card .number {
      font-size: 36px;
      font-weight: bold;
      margin: 0;
    }

    #graph-container {
      width: 100%;
      height: 600px;
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      background: #fafafa;
      position: relative;
      overflow: hidden;
    }

    .graph-canvas {
      width: 100%;
      height: 100%;
      position: relative;
    }

    .node {
      position: absolute;
      padding: 12px 20px;
      border-radius: 6px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.15);
      font-size: 13px;
      font-weight: 500;
      cursor: move;
      transition: all 0.2s;
      min-width: 120px;
      text-align: center;
    }

    .node:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.25);
    }

    .node.redmine {
      background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
      color: white;
      border-left: 4px solid #c0392b;
    }

    .node.gitlab-group {
      background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
      color: white;
      border-left: 4px solid #2980b9;
    }

    .node.gitlab-repo {
      background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
      color: #2c3e50;
      border-left: 4px solid #27ae60;
    }

    .connection {
      position: absolute;
      height: 2px;
      background: linear-gradient(90deg, rgba(66, 153, 225, 0.6) 0%, rgba(66, 153, 225, 0.3) 100%);
      transform-origin: left center;
      pointer-events: none;
      z-index: 0;
    }

    .legend {
      display: flex;
      gap: 30px;
      margin: 20px 0;
      padding: 15px;
      background: white;
      border-radius: 6px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .legend-item {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .legend-color {
      width: 30px;
      height: 20px;
      border-radius: 4px;
    }

    .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(255,255,255,0.9);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 18px;
      color: #666;
      z-index: 100;
    }

    .no-data-message {
      text-align: center;
      padding: 100px 20px;
      color: #666;
    }

    .no-data-message h3 {
      margin: 0 0 10px 0;
      color: #999;
    }

    .mappings-table {
      margin-top: 30px;
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      overflow: hidden;
    }

    .mappings-table h3 {
      padding: 15px 20px;
      margin: 0;
      background: #f5f5f5;
      border-bottom: 2px solid #e0e0e0;
    }

    .mappings-table table {
      width: 100%;
      border-collapse: collapse;
    }

    .mappings-table th {
      background: #fafafa;
      padding: 12px;
      text-align: left;
      font-weight: 600;
      border-bottom: 2px solid #e0e0e0;
    }

    .mappings-table td {
      padding: 12px;
      border-bottom: 1px solid #f0f0f0;
    }

    .mappings-table tr:hover {
      background: #f9f9f9;
    }

    .badge {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 11px;
      font-weight: 600;
      text-transform: uppercase;
    }

    .badge.success {
      background: #d4edda;
      color: #155724;
    }

    .badge.info {
      background: #d1ecf1;
      color: #0c5460;
    }
  </style>
<% end %>

<div class="gitlab-mappings-page">
  <div class="mappings-header">
    <h2>ðŸ”— GitLab Integration Mappings</h2>
    <p style="color: #666; margin: 5px 0 0 0;">
      Visual representation of Redmine projects mapped to GitLab groups and repositories
    </p>
  </div>

  <div class="mappings-stats">
    <div class="stat-card">
      <h3>Total Mappings</h3>
      <p class="number" id="stat-total">0</p>
    </div>
    <div class="stat-card green">
      <h3>Mapped to Groups</h3>
      <p class="number" id="stat-groups">0</p>
    </div>
    <div class="stat-card blue">
      <h3>Mapped to Projects</h3>
      <p class="number" id="stat-projects">0</p>
    </div>
  </div>

  <div class="legend">
    <div class="legend-item">
      <div class="legend-color" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);"></div>
      <span>Redmine Project</span>
    </div>
    <div class="legend-item">
      <div class="legend-color" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);"></div>
      <span>GitLab Group</span>
    </div>
    <div class="legend-item">
      <div class="legend-color" style="background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);"></div>
      <span>GitLab Repository</span>
    </div>
  </div>

  <div id="graph-container">
    <div class="loading-overlay" id="loading">
      Loading mappings...
    </div>
    <div class="graph-canvas" id="graph-canvas"></div>
  </div>

  <div class="mappings-table">
    <h3>ðŸ“‹ Detailed Mappings</h3>
    <table>
      <thead>
        <tr>
          <th>Redmine Project</th>
          <th>GitLab Group ID</th>
          <th>GitLab Project ID</th>
          <th>Mapping Type</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody id="mappings-table-body">
        <tr>
          <td colspan="5" style="text-align: center; padding: 20px; color: #999;">
            Loading...
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>

<script>
(function() {
  let graphData = null;
  let isDragging = false;
  let draggedNode = null;
  let offsetX = 0;
  let offsetY = 0;

  // Fetch graph data
  fetch('/gitlab_mappings/data')
    .then(response => response.json())
    .then(data => {
      graphData = data;
      renderGraph(data);
      renderTable();
      updateStats(data);
      document.getElementById('loading').style.display = 'none';
    })
    .catch(error => {
      console.error('Error loading graph data:', error);
      document.getElementById('loading').innerHTML =
        '<div style="color: #e74c3c;"><strong>Error loading data:</strong> ' + error.message + '</div>';
    });

  function updateStats(data) {
    const totalMappings = new Set(data.nodes.filter(n => n.type === 'redmine').map(n => n.id)).size;
    const groupMappings = new Set(data.nodes.filter(n => n.type === 'gitlab-group').map(n => n.id)).size;
    const projectMappings = new Set(data.nodes.filter(n => n.type === 'gitlab-repo').map(n => n.id)).size;

    document.getElementById('stat-total').textContent = totalMappings;
    document.getElementById('stat-groups').textContent = groupMappings;
    document.getElementById('stat-projects').textContent = projectMappings;
  }

  function renderGraph(data) {
    const canvas = document.getElementById('graph-canvas');
    canvas.innerHTML = '';

    if (!data.nodes || data.nodes.length === 0) {
      canvas.innerHTML = '<div class="no-data-message"><h3>ðŸ“­ No mappings found</h3><p>Create a Redmine project with GitLab integration to see mappings here.</p></div>';
      return;
    }

    // Draw connections first (so they appear behind nodes)
    data.connections.forEach(conn => {
      const sourceNode = data.nodes.find(n => n.id === conn.source);
      const targetNode = data.nodes.find(n => n.id === conn.target);

      if (sourceNode && targetNode) {
        const line = document.createElement('div');
        line.className = 'connection';

        const dx = targetNode.x - sourceNode.x;
        const dy = targetNode.y - sourceNode.y;
        const length = Math.sqrt(dx * dx + dy * dy);
        const angle = Math.atan2(dy, dx) * 180 / Math.PI;

        line.style.width = length + 'px';
        line.style.left = sourceNode.x + 'px';
        line.style.top = sourceNode.y + 'px';
        line.style.transform = `rotate(${angle}deg)`;

        canvas.appendChild(line);
      }
    });

    // Draw nodes
    data.nodes.forEach(node => {
      const nodeEl = document.createElement('div');
      nodeEl.className = `node ${node.type}`;
      nodeEl.textContent = node.label;
      nodeEl.style.left = node.x + 'px';
      nodeEl.style.top = node.y + 'px';
      nodeEl.dataset.nodeId = node.id;

      // Make nodes draggable
      nodeEl.addEventListener('mousedown', startDrag);

      canvas.appendChild(nodeEl);
    });
  }

  function startDrag(e) {
    isDragging = true;
    draggedNode = e.target;
    const rect = draggedNode.getBoundingClientRect();
    const container = document.getElementById('graph-canvas').getBoundingClientRect();
    offsetX = e.clientX - rect.left;
    offsetY = e.clientY - rect.top;

    draggedNode.style.zIndex = '1000';
    e.preventDefault();
  }

  document.addEventListener('mousemove', function(e) {
    if (!isDragging || !draggedNode) return;

    const container = document.getElementById('graph-canvas').getBoundingClientRect();
    const x = e.clientX - container.left - offsetX;
    const y = e.clientY - container.top - offsetY;

    draggedNode.style.left = Math.max(0, Math.min(x, container.width - draggedNode.offsetWidth)) + 'px';
    draggedNode.style.top = Math.max(0, Math.min(y, container.height - draggedNode.offsetHeight)) + 'px';

    // Update node position in data
    const nodeId = draggedNode.dataset.nodeId;
    const node = graphData.nodes.find(n => n.id === nodeId);
    if (node) {
      node.x = parseInt(draggedNode.style.left);
      node.y = parseInt(draggedNode.style.top);
    }

    // Redraw connections
    updateConnections();
  });

  document.addEventListener('mouseup', function() {
    if (draggedNode) {
      draggedNode.style.zIndex = '';
    }
    isDragging = false;
    draggedNode = null;
  });

  function updateConnections() {
    const canvas = document.getElementById('graph-canvas');
    const connections = canvas.querySelectorAll('.connection');
    connections.forEach(conn => conn.remove());

    // Redraw connections
    graphData.connections.forEach(conn => {
      const sourceNode = graphData.nodes.find(n => n.id === conn.source);
      const targetNode = graphData.nodes.find(n => n.id === conn.target);

      if (sourceNode && targetNode) {
        const line = document.createElement('div');
        line.className = 'connection';

        const dx = targetNode.x - sourceNode.x;
        const dy = targetNode.y - sourceNode.y;
        const length = Math.sqrt(dx * dx + dy * dy);
        const angle = Math.atan2(dy, dx) * 180 / Math.PI;

        line.style.width = length + 'px';
        line.style.left = sourceNode.x + 'px';
        line.style.top = sourceNode.y + 'px';
        line.style.transform = `rotate(${angle}deg)`;

        canvas.insertBefore(line, canvas.firstChild);
      }
    });
  }

  function renderTable() {
    <% if @mappings && @mappings.any? %>
      const tbody = document.getElementById('mappings-table-body');
      tbody.innerHTML = '';

      <% @mappings.each do |mapping| %>
        const row = document.createElement('tr');
        row.innerHTML = `
          <td><strong><%= mapping.project.name %></strong><br><small style="color: #999;"><%= mapping.project.identifier %></small></td>
          <td><%= mapping.gitlab_group_id || '<span style="color: #999;">â€”</span>' %></td>
          <td><%= mapping.gitlab_project_id || '<span style="color: #999;">â€”</span>' %></td>
          <td><span class="badge info"><%= mapping.mapping_type || 'unknown' %></span></td>
          <td>
            <% if mapping.gitlab_group_id && mapping.gitlab_project_id %>
              <span class="badge success">âœ“ Fully Mapped</span>
            <% elsif mapping.gitlab_group_id %>
              <span class="badge info">â†’ Group Only</span>
            <% else %>
              <span class="badge" style="background: #f8d7da; color: #721c24;">âœ— No Mapping</span>
            <% end %>
          </td>
        `;
        tbody.appendChild(row);
      <% end %>
    <% else %>
      document.getElementById('mappings-table-body').innerHTML =
        '<tr><td colspan="5" style="text-align: center; padding: 20px; color: #999;">No mappings found</td></tr>';
    <% end %>
  }
})();
</script>
